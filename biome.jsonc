{
	"$schema": "https://biomejs.dev/schemas/1.8.3/schema.json",
	"formatter": {
		"enabled": true,
		"indentStyle": "tab",
		"lineWidth": 100,
		"ignore": ["dist/**", "lib/**", "docs/**"]
	},
	"organizeImports": {
		"enabled": true
	},
	"vcs": {
		"enabled": true,
		"clientKind": "git",
		"useIgnoreFile": true,
		"defaultBranch": "master"
	},
	"linter": {
		"enabled": true,
		"ignore": ["dist/**", "lib/**", "docs/**"],
		"rules": {
			"recommended": true,
			"complexity": {
				"noBannedTypes": "error",
				"noExtraBooleanCast": "error",
				"noMultipleSpacesInRegularExpressionLiterals": "error",
				"noUselessCatch": "error",
				"noThisInStatic": "off",
				"noUselessThisAlias": "error",
				"noUselessTypeConstraint": "error",
				"noWith": "error",
				"useLiteralKeys": "error",
				"useOptionalChain": "error"
			},
			"correctness": {
				"noConstAssign": "error",
				"noConstantCondition": "error",
				"noEmptyCharacterClassInRegex": "error",
				"noEmptyPattern": "error",
				"noGlobalObjectCalls": "error",
				"noInvalidConstructorSuper": "error",
				"noInvalidNewBuiltin": "error",
				"noNonoctalDecimalEscape": "error",
				"noPrecisionLoss": "error",
				"noSelfAssign": "error",
				"noSetterReturn": "error",
				"noSwitchDeclarations": "error",
				"noUndeclaredVariables": "off", // This rule is disabled because it is already covered by TypeScript
				"noUnreachable": "error",
				"noUnreachableSuper": "error",
				"noUnsafeFinally": "error",
				"noUnsafeOptionalChaining": "error",
				"noUnusedLabels": "error",
				"noUnusedPrivateClassMembers": "error",
				"noUnusedVariables": "error",
				"useArrayLiterals": "off",
				"useIsNan": "error",
				"useValidForDirection": "error",
				"useYield": "error"
			},
			"style": {
				"noInferrableTypes": "error",
				"noNamespace": "off",
				"useAsConstAssertion": "error",
				"useConsistentArrayType": "error",
				"useForOf": "error",
				"noParameterAssign": "off",
				"useShorthandFunctionType": "error"
			},
			"suspicious": {
				"noAssignInExpressions": "error",
				"noAsyncPromiseExecutor": "error",
				"noCatchAssign": "error",
				"noClassAssign": "error",
				"noCompareNegZero": "error",
				"noControlCharactersInRegex": "error",
				"noDebugger": "error",
				"noDuplicateCase": "error",
				"noDuplicateClassMembers": "error",
				"noDuplicateObjectKeys": "error",
				"noDuplicateParameters": "error",
				"noEmptyBlockStatements": "error",
				"noExplicitAny": "error",
				"noExtraNonNullAssertion": "error",
				"noFallthroughSwitchClause": "error",
				"noFunctionAssign": "error",
				"noGlobalAssign": "error",
				"noImportAssign": "error",
				"noMisleadingCharacterClass": "error",
				"noMisleadingInstantiator": "error",
				"noPrototypeBuiltins": "error",
				"noRedeclare": "error",
				"noShadowRestrictedNames": "error",
				"noUnsafeDeclarationMerging": "error",
				"noUnsafeNegation": "error",
				"useAwait": "error",
				"useGetterReturn": "error",
				"useNamespaceKeyword": "error",
				"useValidTypeof": "error"
			}
		}
	},
	"javascript": {
		"formatter": {
			"quoteProperties": "asNeeded",
			"trailingCommas": "all",
			"semicolons": "always"
		},
		"globals": []
	},
	"overrides": [
		{
			"include": ["./src/module/quench-tests/nonsense-tests.ts"],
			"linter": {
				"rules": {
					"complexity": {
						"useArrowFunction": "off" // Mocha prefers function expressions
					}
				}
			}
		}
	]
}
